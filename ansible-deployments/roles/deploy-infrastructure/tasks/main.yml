- name: Transfer backend variable file  to the Terraform backend Directory
  template:
       src: "variables/{{ item.src }}"
       dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/AWS-Terraform-infrastructure/terraform/{{item.dest}}"
  with_items:
    - {src: 'backend.tf' , dest: 'backend/variables.tf'}

- name: Transfer backend Conf File to the Terraform deployments Directory
  template:
       src: "backend/{{ item.src }}"
       dest: "{{ tf_scripts_path }}/{{ item.dest }}"
  with_items:
    - {src: 'vpc.conf' , dest: 'vpc/backend.conf'}
    - {src: 'credstash.conf' , dest: 'credstash/backend.conf'}

- name: Transfer Variable Templates File to the Terraform depployments Directory
  template:
       src: "{{ item.src }}"
       dest: "{{ tf_scripts_path }}/{{ item.dest }}"
  with_items:
    - {src: 'vpc.tf' , dest: 'vpc/variables.tf'}
    - {src: 'credstash.tf' , dest: 'credstash/variables.tf'}

- name: Infrastructure depployment
  command: "{{ item }}"
  with_items:
    - chmod u+x tf.sh
    - ./tf.sh backend ./backend
    - ./tf.sh init ./deployments/eca/
    - ./tf.sh deploy ./deployments/eca/
  args:
    chdir: "{{ lookup('ansible.builtin.env', 'HOME') }}/AWS-Terraform-infrastructure/terraform/"

- debug: 
       msg: "Infrastructure is Created"

- name: Fetching VPC Name from AWS
  ec2_vpc_net_info:
        validate_certs: no  
        filters:
            "tag:Name": "{{ user_vpc_name }}"
  register: vpc
       
- name: Validating Vpc
  ansible.builtin.debug:
          msg: "{{msg}}"
  when: user_vpc_name in vpc.vpcs | map(attribute='tags.Name') | list 

- name: Fetching credstash Information from Aws Cli
  command: >
      aws resourcegroupstaggingapi get-resources \
        --tag-filters Key=Name,Values="{{user_credstash_table_name}}" --resource-type-filters 'dynamodb'
  register: table_list

- name: Fetching Credstash Table name
  set_fact:
      info: "{{ table_list.stdout }}"
  register: table_info

- name: Validate Credstash Table
  ansible.builtin.debug:
      msg: "{{msg}}"
  loop: "{{ table_info.ansible_facts.info.ResourceTagMappingList }}"
  when: dynamodb_stack_name in [ item.ResourceARN.split('/')[1] ]
