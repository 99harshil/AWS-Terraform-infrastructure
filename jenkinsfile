pipeline {
  agent any
   
  parameters {
    choice(
            choices: ['apply', 'destroy'],
            description: 'Terraform action to apply or destroy',
            name: 'action'
    )
    choice(
            choices: ['vpc',],
            description: 'Name of Terraform Sub directories',
            name: 'subdirectories'
    )
  }
  
  stages {
    
    stage('Checkout') {
        steps {
            git branch: 'master',
                credentialsId: 'my_cred_id',
                url: 'https://github.com/99harshil/AWS-Terraform-infrastructure.git'

            sh "ls"
        }
    }

    stage('apply') {
        when { 
            expression { params.action == 'apply' }
        }
        steps {
            def elementsToRun = params.subdirectories.split(',')
            dir('terraform/backend') {
                withAWS(credentials: '493d0f87-10d7-4be2-9108-f18321145beb', region: 'us-east-1') {
                    sh 'terraform init'
	            sh 'terraform plan'
                    sh 'terraform apply -auto-approve'
            }
            
            for (subdir in elementsToRun) {
                sh 'echo "Running Terraform in ${subdir}"'
                if (${subdir} == 'vpc') {
                    dir(subdir) {
                        sh 'terraform init'
                        sh 'terraform apply -target="aws_vpc.vpc" -target="aws_subnet.public_subnet" -target="aws_subnet.private_subnet" -auto-approve'
                        sh 'terraform apply'
                    }
                }
                else {
                           sh 'echo "Running Terraform in ${subdir}"'
                    }
            }
          }
       }
    }

    stage('destroy') {
        when {
            expression { params.action == 'destroy' }
        }
        steps {
            def elementsToRun = params.subdirectories.split(',')
            dir('terraform/backend') {
                withAWS(credentials: '493d0f87-10d7-4be2-9108-f18321145beb', region: 'us-east-1') {
                    sh 'terraform destroy -auto-approve'
                }
            }
            for (subdir in elementsToRun) {
                sh 'echo "Running Terraform in ${subdir}"'
                dir(subdir) {
                        sh 'terraform destroy'
                }
            }
        }
    }
  }
}
